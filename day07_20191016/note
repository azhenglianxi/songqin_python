add -> commit ->pull ->push
print('---lesson_15-字典---')
'''

1-字典的定义：
    1-dict1 = {}--空字典
    2-type({})-----<class 'dict'>
    3- 字典名 = {键名：值,键名2：值2}
2-字典的优势：
    1-描述清楚
    2-查找方便
    3-扩展性好
3-字典的特性：
    1-它没有下标---不是序列类型！
    2-一种映射--map
    3-字典是mutable 的---可以改变
4-字典的常用操作----dict1 = {'name': 'Jack', 'age': 40}
    1-获取值：dict1['name']
    2-改变值：'name'已经存在，dict1['name'] = 'tom'
    3-新增：这个键名不存在：dict1['weight'] = 160
        1-python 3 ----从尾部增加
        2-python 2 ----无序的
    4-如果需要获取的值对应的键不存在，那么--  KeyError: 'weight'
    5-字典内部元素不存在顺序的概念
    6-字典内部不会存在相同键名
    7-相同键名时候，后面的值会覆盖前面的值---唯一的
    8-键、值的类型：
        1-键的类型：
            1-数值
            2-字符串
            3-元组
            4-列表---*不能作为键--TypeError: unhashable type: 'list'
            5-字典---*不能作为键
            6-键一定是哈希类型--不能改变的！
        2-值的类型：任意类型
    9-键值对一定要成对出现吗？--键值对
    10-  'name' in dict1  bool
5-字典的技巧：
    1-删除字典元素：
        1-del 字典名[键]
        2- pop---有返回值
        3-没有remove
        4- dict1.clear() 与 dict1 = {}  地址不一样
6-字典的遍历：
    1-for one in students:---one 依次取-key 键
    2-students.items()---键值对
        1- [(键1，值1)，(键2，值2)]
    3- for name , info in students.items():
7-len()--键值长度
8-d.clear()---只改变该地址的内容
9-d = {}----重新指向
10-得到所有的key返回在类List中  students.keys()  ['jack', 'tom']
11-得到所有的value返回在类List中  students.values()
12-增加元素---d.update({4:'4',5:'5'})

'''
'''
问题：
    1- 描述不清晰
    2- 如果原本的列表出现元素的个数变化---有可能会影响后续代码
    3- 严格与下标相关
'''


'''
字典的定义要求：
    1- 键：可以的类型：字符串、int 、float、元组、
            不可以是:列表  、字典 ---TypeError: unhashable type: 'list'---不可以改变的类型

    2- 值：任意类型
'''

'''
1- 键名是不是唯一的？---唯一的  后者覆盖前者
2- 字典能不能改变元素的值？--可以的--dict1[键名] = 值---这个键是存在的---修改值
3- 怎么在字典里增加元素？---可以的--dict1[键名] = 值---这个键不存在的---新增键值对
4- 怎么获取字典元素值：--print(dict1['name'])
5- 这个键不存在，获取这个键的值会怎么样？--KeyError: 'age'
6- 我们怎么在字典的指定位置增加元素？--做不到
    1- 没有必要---字典是无序的-----不通过下标获取值
    2- python3语法----增加键值对在--尾部
       python2语法----增加键值对在--随机
7- 删除键值对：
    1- del dict1['name']
    2- dict1.pop('name')
    3- 没有remove()方法
8- 字典是无序的--没有下标！！！
'''
# nameList = [#学生列表
#     ['Mike', 25, 180,80],
#     ['Tom', 22, 175,80]
# ]
# def user_del():
#     del nameList[1]
# user_del()
#
# print(nameList[1][1])#表达不清晰 ；下标容易发放变化导致报错
#


#2- 字典的定义---键   值
# dict1 = {'name':'tom','age':20}#存储的是值
# # print(len(dict1))#值的个数
# print(dict1)
# print(dict1['name'])
'''
特性：
    1- 定义要求：
        1- 键：可以是： int float tuple bool , str---建议使用
             不可以是：list、dict -TypeError: unhashable type: 'list'（不可以改变的类型）
        2- 值：任意类型
        3- 键值对--成对出现
        4- 字典没有下标

'''


# print(type(dict1))#<class 'dict'>
# students = {
#     'Mike Green': {
#   'age':25,
#      'height':180,
#      'weight':80,
#      'nickname':'ohmy'
#     },
#     'tom': {
#   'age':18,
#      'height':180,
#      'weight':80,
#      'nickname':'mm'
#      }
#  }
# print(students['tom']['age'])


#1- 查询操作---用键去获取----如果键不存在？---会报错--KeyError: 'name01'
# print(dict1['name01'])
#2- 修改---键存在
# dict1['name'] = 'jack'
#3- 增加元素--没有这个键
# dict1['weight'] = 160
#4- 判断键在不在---in
#5- 删除元素---没有remove()

#6- 获取所有的键--返回是类列表---1、不能支持下标取值  2、可以支持遍历操作

# print(list(dict1.keys())[0])#如果实在需要使用下标取值---强制转换成list
# for one in dict1.keys():
#     print(one)

#7- 获取所有的值--返回是类列表---1、不能支持下标取值  2、可以支持遍历操作
# print(dict1.values())
#8- 获取所有的键值对--返回是类列表---1、不能支持下标取值  2、可以支持遍历操作
# print(dict1.items())
dict1 = {'name': 'tom', 'age': 20}  # 键是唯一的,元素是无序


# for one in dict1:#如果只是遍历字典，one 是键
#     print(one,dict1[one])


for one in dict1.items():
    print(one)
print('---lesson_16 函数---')
'''
1-变量的作用域：
    0- 全局变量，可以再函数内部被引用！
    1-局部变量：函数内部--只能在函数里面使用，在函数外部不能使用
    2-全局变量：函数外
    3-在函数内部修改全局变量：global  x
2-缺省参数：
    1-在函数定义的时候，给了初始值 def func(a,b,c=0)
    2-c这个参数，我在函数调用的时候可以不传值，就是默认值。如果传，那就是传的值
    3-定义参数的时候，可缺省可以放在必填前面吗？  不能
        SyntaxError: non-default argument follows default argument
    4- 案例：
        def func(score,sex='M'):
            if score > 60:
                print(sex+'--及格！')
            else:
                print(sex+'--不及格')
        func(80,'W')
3-可变数量参数：(必填，可缺省，可变数)----写法正确--print
    1-数量可变！：可以n个  也可以0个
    2- def calc(*numbers):
    3-type(numbers)
    4-如果传值的是元组/列表--用*展开！
    5-是个元组
    6-建议定义顺序： 必填，可缺省，可变数量
4-关键字可变数量：--dict
    1-关键字
    2-可变数量
    3-**d
    4-是个字典类型
    5-传值：键值对
    6-传入字典： **字典---展开  {1:100,2:200}  1=100  2=200 一定是str
    7- **展开的话，key一定是string----TypeError: func() keywords must be strings
总结：必填参数、缺省参数、可变参数和关键字参数

'''
'''
1- 必填一定在可缺省的前面--语法规定
2- 缺省参数：
    1- 不给实参---就默认初始值
    2- 传实参----实际传入的参数
    3- 必填参数在可缺省的前面！！！
        def print(self, *args, sep=' ', end='\n', file=None)
        file, mode='r'
3- 可变数量参数：
    1- 数量可变--数量不定！！！--可以是N个
    2- * 的作用
        1- 在形参里面---包装一个元组
        2- 在实参里面---展开作用
4- 关键字可变数量：
    1- **d
    2- func(1,2,3,4,5,6,"abc",**dict1)---dict1的key都是str
'''
'''
1- 必填一定要在可缺省前面：SyntaxError: non-default argument follows default argument
2- 当def getSum(a,*inList,b=100,**c) 我们需要将一个字典进行传入，那么这个字典的keys
    一定是str,否则  TypeError: getSum() keywords must be strings
'''



'''
1- 必填参数：def func(a,b,c):#函数定义的时候只是变量名--必填形参
2- 可缺省参数：def func(a,b,c=100)---
    1- 概念：
        1- 函数调用的时候传入的一个c的值---以实际传入的为准
        2- 函数调用的时候不传入的一个c的值---以默认(定义的时候)的为准
    2- 作用：
        1- 方便省事
        2- 这个默认值一般考虑到调用者大部分时候的---使用的场景(值)
    3- 位置：
        可缺省参数----在必填参数之后

3- 可变数量参数：
    1- 引入：虽然可缺省的参数可以代码带来省事效果--但是有个数的限制
    2- 解决当前困境：
        成功案例：print(没有个数限制)
    3- 定义：
        1- def func(a,*args,c=3):
        2- 封装成一个元组形式
        3- 数量可以是 0 个
        4- * 封装元组的效果
    4- 定义格式：
        建议：定义函数参数的时候：必填、可变数量、缺省参数
    5- 函数调用--如果需要传入一个元组类型数据：
        * 元组   --展开的效果
4- 关键字可变数量参数：
    1- 概念：
        1- def func(a,c=3,*b,**kwargs):
        2- **  封装一个---字典(键-值)
        3- 传入形式： 变量 = 值
    2- 作用：
        如同字典的效果：方便查找
    3-函数调用时候我们需要把一个完整字典传进去
        **字典名:键名一定是字符串
        汇总：定义字典的键名一般都用字符串
'''

# x = 2#全局变量:在一个模块.py文件里，从它定义的那一行开始读可以使用
# def func():
#     global x
#     x = 9#局部变量：在函数里面的，函数执行完之后会消失
#     print ("this x1 is in the func:-->",x)
#
# func()
# print ("--------------------------")
# print ("this x2 is out of func:-->",x)



# def get_sum(start=1,end=100):#用户不输入实参--默认值，；用户输入已输入实际值传入
#     i = start
#     sumData = 0
#     while i <= end:
#         sumData += i
#         i += 1
#     return sumData
# print(get_sum(1,1000))


#1- 缺省参数---效果：让函数调用变得更加方便
#  如果调用着传入了实际值，以实际值为准，没有传，以缺省值为准
#   缺省参数在定义的时候在必填后面
# def func(a,b = 1):
#     print(a,b)
# func(2)

# print('hello',end=' ')
# print('python')
# print(1,2,3,4,5,sep='*')


#2- 可变数量参数  参数顺序：(必填,可变数量，可缺省)
# def func(a,*b,c=1):#在函数定义的时候，*代表可变数量参数--会封装一个元组类型
#     print(a,b,c)
#
# func(1,2,3,4,5,c=100)
# print(1,2,3,4,5,sep='*')
# alist = [1,2,3,4]
# def get_sum(*numbers):
#     total = 0
#     print(numbers)#([],)
#     for n in numbers:
#         total = total + n
#     return total
#
# print(get_sum(*alist))# *  函数调用的时候展开元素

#3- 关键字可变数量参---封装成一个字典
dict1 = {'name':'tom','age':20}
def func(a,**kwargs,):
    print(a,kwargs)
func(1,**dict1)

print('---编程题3---')
'''
需求分析：
    请定义一个函数 mySort，参数为一个列表，参数列表中的元素都是整数.
    mySort 函数需要将参数列表中的元素按从小到大排序，最终返回一个新的list。

思路分解：
    1. 创建一个新的列表newList
    2. 先找出所有元素中最小的，append在newList里面
    3. 再找出剩余的所有元素中最小的，append在newList里面
    4. 依次类推，直到所有的元素都放到newList里面
'''
alist = [9,2,6,1]

def my_sort(inList):
    newList = []
    while len(inList) > 0:
        minData = min(inList)
        newList.append(minData)
        #删掉它，让别的值有机会是最小
        inList.remove(minData)
    return newList


print(my_sort(alist))
print('---编程题4---')
'''
需求分析：
    1- 格式如下----一个file1.txt文件里面内容
        name: Jack   ;    salary:  12000
        name :Mike ; salary:  12300
    2- 格式规范
        每个员工一行，记录了员工的姓名和薪资，
        每行记录 原始文件中并不对齐，中间有或多或少的空格
    3- 计算出所有员工的税后工资（薪资的90%）和扣税明细，
        1- 存入新的文件 file2.txt中
        2- tax 表示扣税金额和 income表示实际收入。注意扣税金额和 实际收入要取整数
        3- 输出格式
            name: Jack   ;    salary:  12000 ;  tax: 1200 ; income:  10800

思路分解：name: Jack   ;    salary:  12000
    1- 读取文件内容
    2- 对每一行员工的信息进行提取：名字  薪资
    3- 按照格式要求计算排版，写文件


'''
# name: Jack   ;    salary:  12000
rFileDir = 'G:\\pyTest1.txt'
wFileDir = 'G:\\pyTest2.txt'
with open(rFileDir) as rFile,open(wFileDir,'w') as wFile:
    #1- 读取文件内容
    lines = rFile.read().splitlines()#列表
    #2- 对每一行信息遍历操作--处理数据
    for line in lines:
        if line.count(';') == 1:
            temp = line.split(';')
            if temp[0].count(':') == 1 and temp[1].count(':') == 1 :
                name = temp[0].split(':')[1].strip()
                salary = temp[1].split(':')[1].strip()
                #3- 类型转换
                if salary.isdigit():
                    salary = int(salary)
                    #4- 格式化
                    info = 'name:{:>6};salary:{:>6};tax:{:>6};income:{:0>6}'.format(name,salary,int(salary*0.1),int(salary*0.9))
                else:
                    info = 'this line salary is not digit'
            else:
                info = 'this line : is error'
        else:
            info = 'this line ; is error'

            #5- 写入文件
        wFile.write(info+'\n')
        wFile.flush()



'''
优化：
    1- 场景：这个是你给人事部做的一个小工具 --(gui界面，tk不做要求   导出exe pyinstaller)
    2- 功能：计算工资的详情
    3- 存在bug；
        1- 工资出现非数值
        2- 分号不对
        3- :号缺失
        4- 导出exe pyinstaller

'''


